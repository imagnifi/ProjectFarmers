package ru.imagnifi.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.imagnifi.model.District;
import ru.imagnifi.model.DistrictModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the District service. Represents a row in the &quot;imagnifi_district&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.imagnifi.model.DistrictModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DistrictImpl}.
 * </p>
 *
 * @author imagnifi
 * @see DistrictImpl
 * @see ru.imagnifi.model.District
 * @see ru.imagnifi.model.DistrictModel
 * @generated
 */
public class DistrictModelImpl extends BaseModelImpl<District>
    implements DistrictModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a district model instance should use the {@link ru.imagnifi.model.District} interface instead.
     */
    public static final String TABLE_NAME = "imagnifi_district";
    public static final Object[][] TABLE_COLUMNS = {
            { "districtId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "number_", Types.INTEGER },
            { "status", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table imagnifi_district (districtId LONG not null primary key,name VARCHAR(75) null,number_ INTEGER,status BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table imagnifi_district";
    public static final String ORDER_BY_JPQL = " ORDER BY district.districtId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY imagnifi_district.districtId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.imagnifi.model.District"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.imagnifi.model.District"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.imagnifi.model.District"),
            true);
    public static long STATUS_COLUMN_BITMASK = 1L;
    public static long DISTRICTID_COLUMN_BITMASK = 2L;
    public static final String MAPPING_TABLE_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT_NAME =
        "farmer_imagnifi_mapping_shown_district";
    public static final Object[][] MAPPING_TABLE_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT_COLUMNS =
        {
            { "districtId", Types.BIGINT },
            { "farmerId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT_SQL_CREATE =
        "create table farmer_imagnifi_mapping_shown_district (districtId LONG not null,farmerId LONG not null,primary key (districtId, farmerId))";
    public static final boolean FINDER_CACHE_ENABLED_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT =
        GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.farmer_imagnifi_mapping_shown_district"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.imagnifi.model.District"));
    private static ClassLoader _classLoader = District.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            District.class
        };
    private long _districtId;
    private String _name;
    private int _number;
    private boolean _status;
    private boolean _originalStatus;
    private boolean _setOriginalStatus;
    private long _columnBitmask;
    private District _escapedModel;

    public DistrictModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _districtId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDistrictId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _districtId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return District.class;
    }

    @Override
    public String getModelClassName() {
        return District.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("districtId", getDistrictId());
        attributes.put("name", getName());
        attributes.put("number", getNumber());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long districtId = (Long) attributes.get("districtId");

        if (districtId != null) {
            setDistrictId(districtId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Integer number = (Integer) attributes.get("number");

        if (number != null) {
            setNumber(number);
        }

        Boolean status = (Boolean) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @Override
    public long getDistrictId() {
        return _districtId;
    }

    @Override
    public void setDistrictId(long districtId) {
        _columnBitmask = -1L;

        _districtId = districtId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public int getNumber() {
        return _number;
    }

    @Override
    public void setNumber(int number) {
        _number = number;
    }

    @Override
    public boolean getStatus() {
        return _status;
    }

    @Override
    public boolean isStatus() {
        return _status;
    }

    @Override
    public void setStatus(boolean status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public boolean getOriginalStatus() {
        return _originalStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            District.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public District toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (District) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DistrictImpl districtImpl = new DistrictImpl();

        districtImpl.setDistrictId(getDistrictId());
        districtImpl.setName(getName());
        districtImpl.setNumber(getNumber());
        districtImpl.setStatus(getStatus());

        districtImpl.resetOriginalValues();

        return districtImpl;
    }

    @Override
    public int compareTo(District district) {
        int value = 0;

        if (getDistrictId() < district.getDistrictId()) {
            value = -1;
        } else if (getDistrictId() > district.getDistrictId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof District)) {
            return false;
        }

        District district = (District) obj;

        long primaryKey = district.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DistrictModelImpl districtModelImpl = this;

        districtModelImpl._originalStatus = districtModelImpl._status;

        districtModelImpl._setOriginalStatus = false;

        districtModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<District> toCacheModel() {
        DistrictCacheModel districtCacheModel = new DistrictCacheModel();

        districtCacheModel.districtId = getDistrictId();

        districtCacheModel.name = getName();

        String name = districtCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            districtCacheModel.name = null;
        }

        districtCacheModel.number = getNumber();

        districtCacheModel.status = getStatus();

        return districtCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{districtId=");
        sb.append(getDistrictId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", number=");
        sb.append(getNumber());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("ru.imagnifi.model.District");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>districtId</column-name><column-value><![CDATA[");
        sb.append(getDistrictId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>number</column-name><column-value><![CDATA[");
        sb.append(getNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
