package ru.imagnifi.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.imagnifi.model.Farmer;
import ru.imagnifi.model.FarmerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Farmer service. Represents a row in the &quot;imagnifi_farmer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.imagnifi.model.FarmerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerImpl}.
 * </p>
 *
 * @author imagnifi
 * @see FarmerImpl
 * @see ru.imagnifi.model.Farmer
 * @see ru.imagnifi.model.FarmerModel
 * @generated
 */
public class FarmerModelImpl extends BaseModelImpl<Farmer>
    implements FarmerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a farmer model instance should use the {@link ru.imagnifi.model.Farmer} interface instead.
     */
    public static final String TABLE_NAME = "imagnifi_farmer";
    public static final Object[][] TABLE_COLUMNS = {
            { "farmerId", Types.BIGINT },
            { "organization", Types.VARCHAR },
            { "orgForm", Types.VARCHAR },
            { "inn", Types.BIGINT },
            { "kpp", Types.BIGINT },
            { "ogrn", Types.BIGINT },
            { "districtNumber", Types.BIGINT },
            { "registrationDate", Types.VARCHAR },
            { "archiveStatus", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table imagnifi_farmer (farmerId LONG not null primary key,organization VARCHAR(75) null,orgForm VARCHAR(75) null,inn LONG,kpp LONG,ogrn LONG,districtNumber LONG,registrationDate VARCHAR(75) null,archiveStatus BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table imagnifi_farmer";
    public static final String ORDER_BY_JPQL = " ORDER BY farmer.farmerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY imagnifi_farmer.farmerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.ru.imagnifi.model.Farmer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.ru.imagnifi.model.Farmer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.ru.imagnifi.model.Farmer"),
            true);
    public static long INN_COLUMN_BITMASK = 1L;
    public static long ORGANIZATION_COLUMN_BITMASK = 2L;
    public static long FARMERID_COLUMN_BITMASK = 4L;
    public static final String MAPPING_TABLE_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT_NAME =
        "farmer_imagnifi_mapping_shown_district";
    public static final Object[][] MAPPING_TABLE_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT_COLUMNS =
        {
            { "districtId", Types.BIGINT },
            { "farmerId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT_SQL_CREATE =
        "create table farmer_imagnifi_mapping_shown_district (districtId LONG not null,farmerId LONG not null,primary key (districtId, farmerId))";
    public static final boolean FINDER_CACHE_ENABLED_FARMER_IMAGNIFI_MAPPING_SHOWN_DISTRICT =
        GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.farmer_imagnifi_mapping_shown_district"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.ru.imagnifi.model.Farmer"));
    private static ClassLoader _classLoader = Farmer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Farmer.class };
    private long _farmerId;
    private String _organization;
    private String _originalOrganization;
    private String _orgForm;
    private long _inn;
    private long _originalInn;
    private boolean _setOriginalInn;
    private long _kpp;
    private long _ogrn;
    private long _districtNumber;
    private String _registrationDate;
    private boolean _archiveStatus;
    private long _columnBitmask;
    private Farmer _escapedModel;

    public FarmerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFarmerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _farmerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Farmer.class;
    }

    @Override
    public String getModelClassName() {
        return Farmer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("farmerId", getFarmerId());
        attributes.put("organization", getOrganization());
        attributes.put("orgForm", getOrgForm());
        attributes.put("inn", getInn());
        attributes.put("kpp", getKpp());
        attributes.put("ogrn", getOgrn());
        attributes.put("districtNumber", getDistrictNumber());
        attributes.put("registrationDate", getRegistrationDate());
        attributes.put("archiveStatus", getArchiveStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long farmerId = (Long) attributes.get("farmerId");

        if (farmerId != null) {
            setFarmerId(farmerId);
        }

        String organization = (String) attributes.get("organization");

        if (organization != null) {
            setOrganization(organization);
        }

        String orgForm = (String) attributes.get("orgForm");

        if (orgForm != null) {
            setOrgForm(orgForm);
        }

        Long inn = (Long) attributes.get("inn");

        if (inn != null) {
            setInn(inn);
        }

        Long kpp = (Long) attributes.get("kpp");

        if (kpp != null) {
            setKpp(kpp);
        }

        Long ogrn = (Long) attributes.get("ogrn");

        if (ogrn != null) {
            setOgrn(ogrn);
        }

        Long districtNumber = (Long) attributes.get("districtNumber");

        if (districtNumber != null) {
            setDistrictNumber(districtNumber);
        }

        String registrationDate = (String) attributes.get("registrationDate");

        if (registrationDate != null) {
            setRegistrationDate(registrationDate);
        }

        Boolean archiveStatus = (Boolean) attributes.get("archiveStatus");

        if (archiveStatus != null) {
            setArchiveStatus(archiveStatus);
        }
    }

    @Override
    public long getFarmerId() {
        return _farmerId;
    }

    @Override
    public void setFarmerId(long farmerId) {
        _columnBitmask = -1L;

        _farmerId = farmerId;
    }

    @Override
    public String getOrganization() {
        if (_organization == null) {
            return StringPool.BLANK;
        } else {
            return _organization;
        }
    }

    @Override
    public void setOrganization(String organization) {
        _columnBitmask |= ORGANIZATION_COLUMN_BITMASK;

        if (_originalOrganization == null) {
            _originalOrganization = _organization;
        }

        _organization = organization;
    }

    public String getOriginalOrganization() {
        return GetterUtil.getString(_originalOrganization);
    }

    @Override
    public String getOrgForm() {
        if (_orgForm == null) {
            return StringPool.BLANK;
        } else {
            return _orgForm;
        }
    }

    @Override
    public void setOrgForm(String orgForm) {
        _orgForm = orgForm;
    }

    @Override
    public long getInn() {
        return _inn;
    }

    @Override
    public void setInn(long inn) {
        _columnBitmask |= INN_COLUMN_BITMASK;

        if (!_setOriginalInn) {
            _setOriginalInn = true;

            _originalInn = _inn;
        }

        _inn = inn;
    }

    public long getOriginalInn() {
        return _originalInn;
    }

    @Override
    public long getKpp() {
        return _kpp;
    }

    @Override
    public void setKpp(long kpp) {
        _kpp = kpp;
    }

    @Override
    public long getOgrn() {
        return _ogrn;
    }

    @Override
    public void setOgrn(long ogrn) {
        _ogrn = ogrn;
    }

    @Override
    public long getDistrictNumber() {
        return _districtNumber;
    }

    @Override
    public void setDistrictNumber(long districtNumber) {
        _districtNumber = districtNumber;
    }

    @Override
    public String getRegistrationDate() {
        if (_registrationDate == null) {
            return StringPool.BLANK;
        } else {
            return _registrationDate;
        }
    }

    @Override
    public void setRegistrationDate(String registrationDate) {
        _registrationDate = registrationDate;
    }

    @Override
    public boolean getArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public boolean isArchiveStatus() {
        return _archiveStatus;
    }

    @Override
    public void setArchiveStatus(boolean archiveStatus) {
        _archiveStatus = archiveStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Farmer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Farmer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Farmer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FarmerImpl farmerImpl = new FarmerImpl();

        farmerImpl.setFarmerId(getFarmerId());
        farmerImpl.setOrganization(getOrganization());
        farmerImpl.setOrgForm(getOrgForm());
        farmerImpl.setInn(getInn());
        farmerImpl.setKpp(getKpp());
        farmerImpl.setOgrn(getOgrn());
        farmerImpl.setDistrictNumber(getDistrictNumber());
        farmerImpl.setRegistrationDate(getRegistrationDate());
        farmerImpl.setArchiveStatus(getArchiveStatus());

        farmerImpl.resetOriginalValues();

        return farmerImpl;
    }

    @Override
    public int compareTo(Farmer farmer) {
        int value = 0;

        if (getFarmerId() < farmer.getFarmerId()) {
            value = -1;
        } else if (getFarmerId() > farmer.getFarmerId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Farmer)) {
            return false;
        }

        Farmer farmer = (Farmer) obj;

        long primaryKey = farmer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FarmerModelImpl farmerModelImpl = this;

        farmerModelImpl._originalOrganization = farmerModelImpl._organization;

        farmerModelImpl._originalInn = farmerModelImpl._inn;

        farmerModelImpl._setOriginalInn = false;

        farmerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Farmer> toCacheModel() {
        FarmerCacheModel farmerCacheModel = new FarmerCacheModel();

        farmerCacheModel.farmerId = getFarmerId();

        farmerCacheModel.organization = getOrganization();

        String organization = farmerCacheModel.organization;

        if ((organization != null) && (organization.length() == 0)) {
            farmerCacheModel.organization = null;
        }

        farmerCacheModel.orgForm = getOrgForm();

        String orgForm = farmerCacheModel.orgForm;

        if ((orgForm != null) && (orgForm.length() == 0)) {
            farmerCacheModel.orgForm = null;
        }

        farmerCacheModel.inn = getInn();

        farmerCacheModel.kpp = getKpp();

        farmerCacheModel.ogrn = getOgrn();

        farmerCacheModel.districtNumber = getDistrictNumber();

        farmerCacheModel.registrationDate = getRegistrationDate();

        String registrationDate = farmerCacheModel.registrationDate;

        if ((registrationDate != null) && (registrationDate.length() == 0)) {
            farmerCacheModel.registrationDate = null;
        }

        farmerCacheModel.archiveStatus = getArchiveStatus();

        return farmerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{farmerId=");
        sb.append(getFarmerId());
        sb.append(", organization=");
        sb.append(getOrganization());
        sb.append(", orgForm=");
        sb.append(getOrgForm());
        sb.append(", inn=");
        sb.append(getInn());
        sb.append(", kpp=");
        sb.append(getKpp());
        sb.append(", ogrn=");
        sb.append(getOgrn());
        sb.append(", districtNumber=");
        sb.append(getDistrictNumber());
        sb.append(", registrationDate=");
        sb.append(getRegistrationDate());
        sb.append(", archiveStatus=");
        sb.append(getArchiveStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("ru.imagnifi.model.Farmer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>farmerId</column-name><column-value><![CDATA[");
        sb.append(getFarmerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>organization</column-name><column-value><![CDATA[");
        sb.append(getOrganization());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orgForm</column-name><column-value><![CDATA[");
        sb.append(getOrgForm());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inn</column-name><column-value><![CDATA[");
        sb.append(getInn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kpp</column-name><column-value><![CDATA[");
        sb.append(getKpp());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ogrn</column-name><column-value><![CDATA[");
        sb.append(getOgrn());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>districtNumber</column-name><column-value><![CDATA[");
        sb.append(getDistrictNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>registrationDate</column-name><column-value><![CDATA[");
        sb.append(getRegistrationDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archiveStatus</column-name><column-value><![CDATA[");
        sb.append(getArchiveStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
